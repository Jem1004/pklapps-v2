// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum untuk role pengguna
enum Role {
  STUDENT
  TEACHER
  ADMIN
}

// Enum untuk tipe absensi
enum TipeAbsensi {
  MASUK
  PULANG
}

// Enum untuk mode absensi
enum ModeAbsensi {
  MASUK_SAJA
  MASUK_PULANG
}

// Model User - untuk semua pengguna (siswa, guru, admin)
model User {
  id           String   @id @default(cuid())
  email        String   @unique
  username     String   @unique // Field baru untuk login
  name         String
  passwordHash String // Field baru untuk menyimpan hash password
  role         Role
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relasi untuk siswa
  student Student?

  // Relasi untuk guru
  teacher Teacher?

  // Database indexes for performance optimization
  @@index([role])
  @@index([createdAt])
  @@index([name])
  @@map("users")
}

// Model Student - data khusus siswa
model Student {
  id      String @id @default(cuid())
  userId  String @unique
  nisn    String @unique // Nomor Induk Siswa Nasional
  kelas   String
  jurusan String

  // Relasi ke User
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Relasi ke Tempat PKL
  tempatPklId String?
  tempatPkl   TempatPkl? @relation(fields: [tempatPklId], references: [id])

  // Relasi ke Guru Pembimbing
  teacherId String?
  teacher   Teacher? @relation(fields: [teacherId], references: [id])

  // Relasi ke Jurnal
  jurnals Jurnal[]

  // Relasi ke Absensi
  absensis Absensi[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Database indexes for performance optimization
  @@index([kelas])
  @@index([jurusan])
  @@index([tempatPklId])
  @@index([teacherId])
  @@index([kelas, jurusan])
  @@index([createdAt])
  @@map("students")
}

// Model Teacher - data khusus guru pembimbing
model Teacher {
  id     String @id @default(cuid())
  userId String @unique
  nip    String @unique // Nomor Induk Pegawai

  // Relasi ke User
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Relasi ke siswa yang dibimbing
  students Student[]

  // Relasi ke komentar jurnal
  comments JurnalComment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("teachers")
}

// Model TempatPkl - tempat praktik kerja lapangan
model TempatPkl {
  id         String   @id @default(cuid())
  nama       String
  alamat     String
  pinAbsensi String   @default(cuid())
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relasi yang sudah ada
  students Student[]

  // Tambahkan relasi balik yang hilang
  absensis       Absensi[] // Relasi balik untuk model Absensi
  settingAbsensi SettingAbsensi? // Relasi balik untuk model SettingAbsensi (one-to-one)

  @@map("tempat_pkl")
}

// Model Jurnal - jurnal harian siswa
model Jurnal {
  id          String   @id @default(cuid())
  tanggal     DateTime @db.Date
  kegiatan    String   @db.Text
  keterangan  String?  @db.Text // Keterangan tambahan dari siswa (opsional)
  dokumentasi String? // URL atau path file dokumentasi (opsional)

  // Relasi ke Student
  studentId String
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  // Relasi ke komentar
  comments JurnalComment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Constraint: satu siswa hanya bisa membuat satu jurnal per hari
  @@unique([studentId, tanggal])
  // Database indexes for performance optimization
  @@index([tanggal])
  @@index([studentId])
  @@index([createdAt])
  @@index([tanggal, studentId])
  @@map("jurnals")
}

// Model JurnalComment - komentar guru pada jurnal siswa
model JurnalComment {
  id      String @id @default(cuid())
  comment String @db.Text

  // Relasi ke Jurnal
  jurnalId String
  jurnal   Jurnal @relation(fields: [jurnalId], references: [id], onDelete: Cascade)

  // Relasi ke Teacher
  teacherId String
  teacher   Teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("jurnal_comments")
}

// Model Absensi - sistem absensi siswa PKL
model Absensi {
  id          String      @id @default(cuid())
  tanggal     DateTime    @db.Date // Hanya tanggal
  waktuMasuk  DateTime? // Waktu masuk (nullable)
  waktuPulang DateTime? // Waktu pulang (nullable)
  tipe        TipeAbsensi // MASUK atau PULANG
  version     Int         @default(1) // Optimistic locking version

  // Relasi ke Student
  studentId String
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  // Relasi ke TempatPkl
  tempatPklId String
  tempatPkl   TempatPkl @relation(fields: [tempatPklId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Constraint: satu siswa hanya bisa absen satu kali per hari per tipe
  @@unique([studentId, tanggal, tipe])
  // Database indexes for performance optimization
  @@index([tanggal])
  @@index([studentId])
  @@index([tempatPklId])
  @@index([tipe])
  @@index([tanggal, studentId])
  @@index([tanggal, tipe])
  @@index([createdAt])
  @@index([version])
  @@map("absensis")
}

// Model SettingAbsensi - pengaturan absensi per tempat PKL
model SettingAbsensi {
  id          String      @id @default(cuid())
  modeAbsensi ModeAbsensi // MASUK_SAJA atau MASUK_PULANG
  version     Int         @default(1) // Optimistic locking version

  // Relasi ke TempatPkl (one-to-one)
  tempatPklId String    @unique
  tempatPkl   TempatPkl @relation(fields: [tempatPklId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([version])
  @@map("setting_absensis")
}
